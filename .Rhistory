default(scale_color_gradientn)
default(scale_fill_gradient)
default(scale_fill_gradient2)
devtools::document
devtools::document
library(htmltools)
install.packages("htmltools")
devtools::document
library(cspplot)
a=c(1:10)
b=c(21:30)
c=data.frame(a,b)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
library(ggplot2)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
default::default(scale_color_gradient)
default::default(scale_color_continuous)
default::default(scale_color_gradient) <- list(low = "#7581B3", high = "#99C2C2")
p
p+scale_color_gradient()
p+scale_color_continuous()
default::default(scale_color_continuous) <- list(type="gradient")
p+scale_color_continuous()
default::default(scale_color_continuous) <- list(type="gradient")
default::default(scale_color_continuous)
default::default(scale_color_continuous) <- list(default="gradient")
library(default)
library(ggplot2)
default(scale_color_continuous)
library(cspplot)
a=c(1:10)
b=c(21:30)
c=data.frame(a,b)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p+theme_csp()
default(scale_colour_gradient)
default::default(scale_color_gradientn)
default::default(scale_color_gradientn) <-list(colors = CSP_colors)
default::default(scale_colour_gradient)
default::default(scale_fill_gradientn)
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
library(cspplot)
library(ggplot2)
a=c(1:10)
b=c(21:30)
c=data.frame(a,b)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
p+theme_csp()+scale_color_continuous()
p+theme_csp()+scale_color_gradient()
p+theme_csp()+scale_colour_gradient()
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp()
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp()
p<-ggplot(data=c, aes(x=a,y=b,fill=as.factor(b)))+geom_point()
p
p+theme_csp()
p
View(p)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p.mapping.colour
p[mapping]
p.mapping
p[1]
p[2]
p["mapping"]
q = p+theme_csp()
View(q)
inherits(q, colour)
inherits(q["mapping"]["colour"],TRUE)
q["mapping"]
q["mapping"]["colour"]
q["mapping"][3]
q["mapping"][1]
q["mapping"][0]
q["mapping"][1][3]
q["mapping"][1][2]
q["mapping"][1]
q["mapping"]
length(q["mapping"])
length(q[4])
q[4]
q[4][2]
q[4]
list(q[4])
scale_type(p)
scale_type(p[x])
scale_type(a)
scale_type(b)
View(q)
scale_type(q["data"])
scale_type(q["data"][1])
scale_type(q["data"][2])
q["data"]
q["mapping"]
q["mapping"]["x"]
q["x"]
q["data"]
q["data"][1]
q["data"][0]
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp()
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
csp_pal <- function() { manual_pal(CSP_colors) }
View(csp_pal)
scale_colour_discrete <- function(...) { discrete_scale("colour", "csp", csp_pal(), ...) }
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
library(scales)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp()
a=c(1:10)
b=c(21:30)
c=data.frame(a,b)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
library(ggplot2)
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
devtools::document
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp()
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
CSP_colors[1:3]
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
CSP_colors[13,1,7,2,8]
CSP_colors[13,1,7,2,8]
CSP_colors[13]
CSP_colors[13,1]
CSP_colors[1,2,7,8,13]
CSP_colors[c(1,2,7,8,13)]
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p
p+theme_csp()
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=b))+geom_point()
p+theme_csp()
p+theme_csp()+scale_color_gradient2()
p+theme_csp()+scale_color_gradientn()
p+theme_csp()+scale_color_gradient()
p+theme_csp()+scale_colour_gradient()
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p+theme_csp()
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_bar()
p
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_line()
p
p+theme_csp
p+theme_csp()
library(cspplot)
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_line()
p<-ggplot(data=c, aes(x=a,y=b,color=as.factor(b)))+geom_point()
p
p+theme_csp_dark()
devtools::document
p+theme_csp_dark()
library(cspplot)
p+theme_csp_dark()
library(cspplot)
library(cspplot)
p+theme_csp_dark()
p+theme_csp()
p+theme_csp()+scale_color_discrete()
scale_color_discrete()
scale_color_discrete(palette())
scale_color_discrete()[palette]
scale_color_discrete(1:3
)
scale_color_discrete.get_labels()
scale_color_discrete().get_labels()
scale_color_discrete(get_labels())
CSP_colors
library(cspplot)
display_colors()
print <- data.frame(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
#' ggplot2 theme colors for the "Cognitive Science of Pragmatics" Research Group, Department of Linguistics, University of TÃ¼bingen, Germany.
#' Chair: Prof. Dr. Michael Franke
#'
#' @import tidyverse
#' @import ggplot2
#' @import cspplot
#' @export
##################################################
## CSP-colors
##################################################
display_colors<-function(...){
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous", "opal", "shimmer", "crayola", "fern", "independence",
"glaucous light 2", "opal dark 2", "shimmer light 2", "crayola dark 2", "fern light 3", "independence light 4",
"glaucous dark 3", "shimmer dark 2"
)
data <- tibble(
name = factor(CSP_color_names, levels = CSP_color_names),
value = 3 + runif(length(name))
)
data
data %>% ggplot(aes(x = name, y = value, fill = name)) +
geom_col(show.legend = FALSE) +
theme_csp() +
coord_flip()
}
list_colors<-function(...){
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous", "opal", "shimmer", "crayola", "fern", "independence",
"glaucous light 2", "opal dark 2", "shimmer light 2", "crayola dark 2", "fern light 3", "independence light 4",
"glaucous dark 3", "shimmer dark 2"
)
print <- data.frame(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
print
}
print <- data.frame(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous", "opal", "shimmer", "crayola", "fern", "independence",
"glaucous light 2", "opal dark 2", "shimmer light 2", "crayola dark 2", "fern light 3", "independence light 4",
"glaucous dark 3", "shimmer dark 2"
)
print <- data.frame(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
View(print)
devtools::document
library(cspplot)
display_colors()
library(cspplot)
display_colors()
CSP_colors = c(
"#7581B3", "#99C2C2", "#C65353", "#E2BA78", "#5C7457", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous", "opal", "shimmer", "crayola", "fern", "independence",
"glaucous light 2", "opal dark 2", "shimmer light 2", "crayola dark 2", "fern light 3", "independence light 4",
"glaucous dark 3", "shimmer dark 2"
)
data <- data.frame(
name = factor(CSP_color_names, levels = CSP_color_names),
value = 3 + runif(length(name))
)
data <- data.frame(
name = as.factor(CSP_color_names),
value = 3 + runif(length(name))
)
print <- tibble::tibble(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
print
library(cspplot)
library(cspplot)
display_colors()
library(cspplot)
display_colors()
library(cspplot)
display_colors()
library(cspplot)
display_colors()
library(cspplot)
display_colors()
library(cspplot)
display_colors()
list_colors()
library(cspplot)
list_colors()
display_colors()
library(cspplot)
display_colors()
library(cspplot)
#' @export
##################################################
## CSP-colors
##################################################
#JS: change (16/02/2023) - moved "#99C2C2" from position 2 to position 5
CSP_colors = c(
"#7581B3", "#C65353", "#E2BA78","#5C7457", "#99C2C2", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
csp_pal <- function() {
scales::manual_pal(CSP_colors)
}
csp_pal_cont <- function() {
scales::gradient_n_pal(CSP_colors[c(13,12)])
}
csp_pal_diverg <- function() {
scales::gradient_n_pal(CSP_colors[c(13,12,14)])
}
csp_pal_cont_n <- function() {
scales::gradient_n_pal(CSP_colors[c(13,1,7,12,2,8)])
}
#' @export
scale_color_discrete <- function(...) { discrete_scale("colour", "csp", csp_pal(), ...) }
#' @export
scale_colour_discrete <- function(...) { discrete_scale("colour", "csp", csp_pal(), ...) }
#' @export
scale_fill_discrete <- function(...) { discrete_scale("fill", "csp", csp_pal(), ...) }
#' @export
scale_color_continuous <- function(...) { continuous_scale("colour", "csp", csp_pal_cont(), ...) }
#' @export
scale_colour_continuous <- function(...) { continuous_scale("colour", "csp", csp_pal_cont(), ...) }
#' @export
scale_fill_continuous <- function(...) { continuous_scale("fill", "csp", csp_pal_cont(), ...) }
#scale_fill_continuous <- function(low = 13, high = 12, ...) { continuous_scale("fill", "csp", csp_pal_cont(low = low, high = high), ...) }
#' @export
scale_color_gradient <- function(...) { continuous_scale("colour", "csp", csp_pal_cont(), ...) }
#' @export
scale_colour_gradient <- function(...) { continuous_scale("colour", "csp", csp_pal_cont(), ...) }
#' @export
scale_fill_gradient <- function(...) { continuous_scale("fill", "csp", csp_pal_cont(), ...) }
#' @export
scale_color_gradient2 <- function(...) { continuous_scale("colour", "csp", csp_pal_diverg(), ...) }
#' @export
scale_colour_gradient2 <- function(...) { continuous_scale("colour", "csp", csp_pal_diverg(), ...) }
#' @export
scale_fill_gradient2 <- function(...) { continuous_scale("fill", "csp", csp_pal_diverg(), ...) }
#' @export
scale_color_gradientn <- function(...) { continuous_scale("colour", "csp", csp_pal_cont_n(), ...) }
#' @export
scale_colour_gradientn <- function(...) { continuous_scale("colour", "csp", csp_pal_cont_n(), ...) }
#' @export
scale_fill_gradientn <- function(...) { continuous_scale("fill", "csp", csp_pal_cont_n(), ...) }
#----------------------------------------------------------------
#' light version of the CSP ggplot2 theme
#'
#' Theme for the "Cognitive Science of Pragmatics" Research Group, Department of Linguistics, University of TÃ¼bingen, Germany.
#' Based on the Aida theme (https://github.com/michael-franke/aida-package)
#'
#' @param title.size title element size in pts
#' @param text.size text element size in pts
#' @param legend.position either one of "none", "left", "right", "bottom", "top"
#' @param show.axis boolean or "x", "y"; should axis be drawn? Which?
#' @param show.grid boolean; should grid lines be drawn?
#' @param plot.margin margin around entire plot (unit with the sizes of the top, right, bottom, and left margins)
#'
#' @import ggplot2
#' @import scales
#' @returns ggplot theme
#' @export
theme_csp <- function(title.size = 16, text.size = 14, legend.position = "top",
show.axis = FALSE, show.grid = TRUE,
plot.margin = c(.2, .1, .2, .1)){
############# baseline plot style ###########################
layout <- theme_classic()
layout <- layout + theme(text = element_text(size = text.size),
title = element_text(size = title.size,
face = "bold"),
line = element_line(size = .5))
# axis
if (inherits(show.axis, "character") | show.axis == FALSE){
if (inherits(show.axis, "character")){
show.axis <- tolower(show.axis)
if (show.axis == "x"){
layout <- layout + theme(axis.line.y = element_blank())
}
if (show.axis == "y"){
layout <- layout + theme(axis.line.x = element_blank())
}
} else {
layout <- layout + theme(axis.line.x = element_blank(),
axis.line.y = element_blank())
}
}
# grid lines
if (show.grid == TRUE){
layout <- layout + theme(panel.grid.major = element_line(size = .2,
color = "#333333",
linetype = "dotted"))
}
# axis titles
layout <- layout + theme(axis.title.x = element_text(margin = margin(t = 8)))
# axis labels
layout <- layout + theme(axis.text = element_text(face = "plain"))
# subtitle
layout <- layout + theme(plot.subtitle = element_text(face = "plain",
color = "#4d4d4d"))
# legend
layout <- layout + theme(legend.position = legend.position,
legend.background = element_blank(),
legend.key.height = unit(2, "line"))
# facets
layout <- layout + theme(strip.background = element_blank(),
strip.text = element_text(size = title.size,
face = "bold"))
# misc
layout <- layout + theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.margin = unit(plot.margin, "cm"))
layout
}
#' List the colors in the CSP color palette
#'
#'list_colors() returns a tibble of the CSP color names and their Hex color codes.
#' @import tibble
#' @export
#' @returns a 2 x 14 tibble of the 14 colors in the CSP color palette and their Hex
#' color codes.
##################################################
## List CSP-colors
##################################################
list_colors<-function(){
CSP_colors = c(
"#7581B3", "#C65353", "#E2BA78", "#5C7457", "#99C2C2", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous", "shimmer", "crayola", "fern", "opal", "independence",
"glaucous light 2", "opal dark 2", "shimmer light 2", "crayola dark 2", "fern light 3", "independence light 4",
"glaucous dark 3", "shimmer dark 2"
)
print <- tibble::tibble(
name = factor(CSP_color_names, levels = CSP_color_names),
hex = CSP_colors
)
print
}
#' Display the CSP color palette
#'
#'display_colors() produces a par plot showing the full color palette of the cspplot
#'package together with color names
#' @import tibble
#' @import ggplot2
#' @export
#' @returns A ggplot2 object
##################################################
## Display CSP colors
##################################################
display_colors<-function(...){
CSP_colors = c(
"#7581B3", "#C65353", "#E2BA78", "#5C7457", "#99C2C2", "#575463",
"#B0B7D4", "#66A3A3", "#DB9494", "#D49735", "#9BB096", "#D4D3D9",
"#414C76", "#993333"
)
CSP_color_names = c("glaucous, #7581B3", "shimmer, #C65353", "crayola, #E2BA78", "fern, #5C7457", "opal, #99C2C2", "independence, #575463",
"glaucous light 2, #B0B7D4", "opal dark 2, #66A3A3", "shimmer light 2, #DB9494", "crayola dark 2, #D49735", "fern light 3, #9BB096", "independence light 4, #D4D3D9",
"glaucous dark 3, #414C76", "shimmer dark 2, #993333"
)
data <- tibble::tibble(
name = factor(CSP_color_names, levels = CSP_color_names),
value = 3 + runif(length(name))
)
data
library(ggplot2)
plot <- ggplot(data, aes(x = name, y = value, fill = name)) +
geom_col(show.legend = FALSE) +
theme_classic() +
scale_fill_manual(values=CSP_colors)+
coord_flip()
plot
}
devtools::document()
devtools::document()
library(cspplot)
